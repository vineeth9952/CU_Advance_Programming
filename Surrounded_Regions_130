class Solution 
{
    public static void dfs(int i, int j, char[][] board, boolean[][] visited)
    {
        if (i<0 || i>=board.length || j<0 || j>=board[0].length || board[i][j]=='X' || visited[i][j])
        {
            return ;
        }
        visited[i][j] = true;

        dfs(i+1, j, board, visited);
        dfs(i-1, j, board, visited);
        dfs(i, j+1, board, visited);
        dfs(i, j-1, board, visited);


        return  ;

    }
    public void solve(char[][] board) 
    {
        int m = board.length ;
        if (m==0)
            return ;
        int n = board[0].length ;
        boolean[][] visited = new boolean[m][n];
        for(int i=0;i<n;i++)//Top
        {
            if(board[0][i]=='O')
            {
                dfs(0,i,board,visited);
            }
        }    
        for(int i=0;i<m;i++)
        {
            if(board[i][0]=='O')//left
            {
                dfs(i,0,board,visited);
            } 
        }
        for(int i=0;i<n;i++)//bottom
        {
            if(board[m-1][i]=='O')
            {
                dfs(m-1,i,board,visited);
            }
        }
        for(int i=0;i<m;i++)//right
        {
            if(board[i][n-1]=='O')
            {
                dfs(i,n-1,board,visited);
            } 
        }
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if (board[i][j] == 'O' && !visited[i][j])
                {
                    board[i][j] = 'X';
                }
            }
        }




    }
}
